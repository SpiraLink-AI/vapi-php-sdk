<?php declare(strict_types=1);

namespace Vapi\Calls\Requests;

use DateTime;
use Vapi\Calls\Types\CallsListPaginatedRequestClientMessagesItem;
use Vapi\Calls\Types\CallsListPaginatedRequestFirstMessageMode;
use Vapi\Calls\Types\CallsListPaginatedRequestServerMessagesItem;
use Vapi\Calls\Types\CallsListPaginatedRequestSortOrder;
use Vapi\Calls\Types\CallsListPaginatedRequestStructuredOutputsValue;
use Vapi\Core\Json\JsonSerializableType;
use Vapi\Types\CompliancePlan;
use Vapi\Types\KeypadInputPlan;

final class CallsListPaginatedRequest extends JsonSerializableType
{
    /**
     * @var ?string $assistantId This will return calls with the specified assistantId.
     */
    public ?string $assistantId;

    /**
     * @var ?string $assistantName This will return calls where the transient assistant name exactly matches the specified value (case-insensitive).
     */
    public ?string $assistantName;

    /**
     * @var ?string $id This will return calls with the specified callId.
     */
    public ?string $id;

    /**
     * @var ?string $idAny This will return calls with the specified callIds. Comma-separated list of call IDs.
     */
    public ?string $idAny;

    /**
     * @var ?float $costLe This will return calls where the cost is less than or equal to the specified value.
     */
    public ?float $costLe;

    /**
     * @var ?float $costGe This will return calls where the cost is greater than or equal to the specified value.
     */
    public ?float $costGe;

    /**
     * @var ?float $cost This will return calls with the exact specified cost.
     */
    public ?float $cost;

    /**
     * @var ?string $successEvaluation This will return calls with the specified successEvaluation.
     */
    public ?string $successEvaluation;

    /**
     * @var ?string $endedReason This will return calls with the specified endedReason.
     */
    public ?string $endedReason;

    /**
     * @var ?string $transcriber These are the options for the assistant's transcriber.
     */
    public ?string $transcriber;

    /**
     * @var ?string $model These are the options for the assistant's LLM.
     */
    public ?string $model;

    /**
     * @var ?string $voice These are the options for the assistant's voice.
     */
    public ?string $voice;

    /**
     * This is the first message that the assistant will say. This can also be a URL to a containerized audio file (mp3, wav, etc.).
     *
     * If unspecified, assistant will wait for user to speak and use the model to respond once they speak.
     *
     * @var ?string $firstMessage
     */
    public ?string $firstMessage;

    /**
     * @var ?bool $firstMessageInterruptionsEnabled
     */
    public ?bool $firstMessageInterruptionsEnabled;

    /**
     * This is the mode for the first message. Default is 'assistant-speaks-first'.
     *
     * Use:
     * - 'assistant-speaks-first' to have the assistant speak first.
     * - 'assistant-waits-for-user' to have the assistant wait for the user to speak first.
     * - 'assistant-speaks-first-with-model-generated-message' to have the assistant speak first with a message generated by the model based on the conversation state. (`assistant.model.messages` at call start, `call.messages` at squad transfer points).
     *
     * @default 'assistant-speaks-first'
     *
     * @var ?value-of<CallsListPaginatedRequestFirstMessageMode> $firstMessageMode
     */
    public ?string $firstMessageMode;

    /**
     * These are the settings to configure or disable voicemail detection. Alternatively, voicemail detection can be configured using the model.tools=[VoicemailTool].
     * This uses Twilio's built-in detection while the VoicemailTool relies on the model to detect if a voicemail was reached.
     * You can use neither of them, one of them, or both of them. By default, Twilio built-in detection is enabled while VoicemailTool is not.
     *
     * @var ?string $voicemailDetection
     */
    public ?string $voicemailDetection;

    /**
     * @var ?array<value-of<CallsListPaginatedRequestClientMessagesItem>> $clientMessages These are the messages that will be sent to your Client SDKs. Default is conversation-update,function-call,hang,model-output,speech-update,status-update,transfer-update,transcript,tool-calls,user-interrupted,voice-input,workflow.node.started. You can check the shape of the messages in ClientMessage schema.
     */
    public ?array $clientMessages;

    /**
     * @var ?array<value-of<CallsListPaginatedRequestServerMessagesItem>> $serverMessages These are the messages that will be sent to your Server URL. Default is conversation-update,end-of-call-report,function-call,hang,speech-update,status-update,tool-calls,transfer-destination-request,handoff-destination-request,user-interrupted. You can check the shape of the messages in ServerMessage schema.
     */
    public ?array $serverMessages;

    /**
     * This is the maximum number of seconds that the call will last. When the call reaches this duration, it will be ended.
     *
     * @default 600 (10 minutes)
     *
     * @var ?float $maxDurationSeconds
     */
    public ?float $maxDurationSeconds;

    /**
     * This is the background sound in the call. Default for phone calls is 'office' and default for web calls is 'off'.
     * You can also provide a custom sound by providing a URL to an audio file.
     *
     * @var ?string $backgroundSound
     */
    public ?string $backgroundSound;

    /**
     * This determines whether the model's output is used in conversation history rather than the transcription of assistant's speech.
     *
     * Default `false` while in beta.
     *
     * @default false
     *
     * @var ?bool $modelOutputInMessagesEnabled
     */
    public ?bool $modelOutputInMessagesEnabled;

    /**
     * @var ?array<string> $transportConfigurations These are the configurations to be passed to the transport providers of assistant's calls, like Twilio. You can store multiple configurations for different transport providers. For a call, only the configuration matching the call transport provider is used.
     */
    public ?array $transportConfigurations;

    /**
     * This is the plan for observability of assistant's calls.
     *
     * Currently, only Langfuse is supported.
     *
     * @var ?string $observabilityPlan
     */
    public ?string $observabilityPlan;

    /**
     * @var ?array<string> $credentials These are dynamic credentials that will be used for the assistant calls. By default, all the credentials are available for use in the call but you can supplement an additional credentials using this. Dynamic credentials override existing credentials.
     */
    public ?array $credentials;

    /**
     * @var ?array<string> $hooks This is a set of actions that will be performed on certain events.
     */
    public ?array $hooks;

    /**
     * These are values that will be used to replace the template variables in the assistant messages and other text-based fields.
     * This uses LiquidJS syntax. https://liquidjs.com/tutorials/intro-to-liquid.html
     *
     * So for example, `{{ name }}` will be replaced with the value of `name` in `variableValues`.
     * `{{"now" | date: "%b %d, %Y, %I:%M %p", "America/New_York"}}` will be replaced with the current date and time in New York.
     *  Some VAPI reserved defaults:
     *  - *customer* - the customer object
     *
     * @var ?array<string, mixed> $variableValues
     */
    public ?array $variableValues;

    /**
     * This is the name of the customer. This is just for your own reference.
     *
     * For SIP inbound calls, this is extracted from the `From` SIP header with format `"Display Name" <sip:username@domain>`.
     *
     * @var ?string $name
     */
    public ?string $name;

    /**
     * This is the message that the assistant will say if the call is forwarded to voicemail.
     *
     * If unspecified, it will hang up.
     *
     * @var ?string $voicemailMessage
     */
    public ?string $voicemailMessage;

    /**
     * This is the message that the assistant will say if it ends the call.
     *
     * If unspecified, it will hang up without saying anything.
     *
     * @var ?string $endCallMessage
     */
    public ?string $endCallMessage;

    /**
     * @var ?array<string> $endCallPhrases This list contains phrases that, if spoken by the assistant, will trigger the call to be hung up. Case insensitive.
     */
    public ?array $endCallPhrases;

    /**
     * @var ?CompliancePlan $compliancePlan
     */
    public ?CompliancePlan $compliancePlan;

    /**
     * @var ?array<string, mixed> $metadata This is for metadata you want to store on the assistant.
     */
    public ?array $metadata;

    /**
     * This enables filtering of noise and background speech while the user is talking.
     *
     * Features:
     * - Smart denoising using Krisp
     * - Fourier denoising
     *
     * Smart denoising can be combined with or used independently of Fourier denoising.
     *
     * Order of precedence:
     * - Smart denoising
     * - Fourier denoising
     *
     * @var ?string $backgroundSpeechDenoisingPlan
     */
    public ?string $backgroundSpeechDenoisingPlan;

    /**
     * @var ?string $analysisPlan This is the plan for analysis of assistant's calls. Stored in `call.analysis`.
     */
    public ?string $analysisPlan;

    /**
     * @var ?string $artifactPlan This is the plan for artifacts generated during assistant's calls. Stored in `call.artifact`.
     */
    public ?string $artifactPlan;

    /**
     * This is the plan for when the assistant should start talking.
     *
     * You should configure this if you're running into these issues:
     * - The assistant is too slow to start talking after the customer is done speaking.
     * - The assistant is too fast to start talking after the customer is done speaking.
     * - The assistant is so fast that it's actually interrupting the customer.
     *
     * @var ?string $startSpeakingPlan
     */
    public ?string $startSpeakingPlan;

    /**
     * This is the plan for when assistant should stop talking on customer interruption.
     *
     * You should configure this if you're running into these issues:
     * - The assistant is too slow to recognize customer's interruption.
     * - The assistant is too fast to recognize customer's interruption.
     * - The assistant is getting interrupted by phrases that are just acknowledgments.
     * - The assistant is getting interrupted by background noises.
     * - The assistant is not properly stopping -- it starts talking right after getting interrupted.
     *
     * @var ?string $stopSpeakingPlan
     */
    public ?string $stopSpeakingPlan;

    /**
     * This is the plan for real-time monitoring of the assistant's calls.
     *
     * Usage:
     * - To enable live listening of the assistant's calls, set `monitorPlan.listenEnabled` to `true`.
     * - To enable live control of the assistant's calls, set `monitorPlan.controlEnabled` to `true`.
     *
     * @var ?string $monitorPlan
     */
    public ?string $monitorPlan;

    /**
     * @var ?array<string> $credentialIds These are the credentials that will be used for the assistant calls. By default, all the credentials are available for use in the call but you can provide a subset using this.
     */
    public ?array $credentialIds;

    /**
     * This is where Vapi will send webhooks. You can find all webhooks available along with their shape in ServerMessage schema.
     *
     * The order of precedence is:
     *
     * 1. assistant.server.url
     * 2. phoneNumber.serverUrl
     * 3. org.serverUrl
     *
     * @var ?string $server
     */
    public ?string $server;

    /**
     * @var ?KeypadInputPlan $keypadInputPlan
     */
    public ?KeypadInputPlan $keypadInputPlan;

    /**
     * @var ?string $phoneNumberId This will return calls with the specified phoneNumberId.
     */
    public ?string $phoneNumberId;

    /**
     * This is the flag to toggle the E164 check for the `number` field. This is an advanced property which should be used if you know your use case requires it.
     *
     * Use cases:
     * - `false`: To allow non-E164 numbers like `+001234567890`, `1234`, or `abc`. This is useful for dialing out to non-E164 numbers on your SIP trunks.
     * - `true` (default): To allow only E164 numbers like `+14155551234`. This is standard for PSTN calls.
     *
     * If `false`, the `number` is still required to only contain alphanumeric characters (regex: `/^\+?[a-zA-Z0-9]+$/`).
     *
     * @default true (E164 check is enabled)
     *
     * @var ?bool $numberE164CheckEnabled
     */
    public ?bool $numberE164CheckEnabled;

    /**
     * @var ?string $extension This is the extension that will be dialed after the call is answered.
     */
    public ?string $extension;

    /**
     * These are the overrides for the assistant's settings and template variables specific to this customer.
     * This allows customization of the assistant's behavior for individual customers in batch calls.
     *
     * @var ?string $assistantOverrides
     */
    public ?string $assistantOverrides;

    /**
     * @var ?string $number This is the number of the customer.
     */
    public ?string $number;

    /**
     * @var ?string $sipUri This is the SIP URI of the customer.
     */
    public ?string $sipUri;

    /**
     * @var ?string $email This is the email of the customer.
     */
    public ?string $email;

    /**
     * @var ?string $externalId This is the external ID of the customer.
     */
    public ?string $externalId;

    /**
     * @var ?array<string, ?CallsListPaginatedRequestStructuredOutputsValue> $structuredOutputs Filter calls by structured output values. Use structured output ID as key and filter operators as values.
     */
    public ?array $structuredOutputs;

    /**
     * @var ?float $page This is the page number to return. Defaults to 1.
     */
    public ?float $page;

    /**
     * @var ?value-of<CallsListPaginatedRequestSortOrder> $sortOrder This is the sort order for pagination. Defaults to 'DESC'.
     */
    public ?string $sortOrder;

    /**
     * @var ?float $limit This is the maximum number of items to return. Defaults to 100.
     */
    public ?float $limit;

    /**
     * @var ?DateTime $createdAtGt This will return items where the createdAt is greater than the specified value.
     */
    public ?DateTime $createdAtGt;

    /**
     * @var ?DateTime $createdAtLt This will return items where the createdAt is less than the specified value.
     */
    public ?DateTime $createdAtLt;

    /**
     * @var ?DateTime $createdAtGe This will return items where the createdAt is greater than or equal to the specified value.
     */
    public ?DateTime $createdAtGe;

    /**
     * @var ?DateTime $createdAtLe This will return items where the createdAt is less than or equal to the specified value.
     */
    public ?DateTime $createdAtLe;

    /**
     * @var ?DateTime $updatedAtGt This will return items where the updatedAt is greater than the specified value.
     */
    public ?DateTime $updatedAtGt;

    /**
     * @var ?DateTime $updatedAtLt This will return items where the updatedAt is less than the specified value.
     */
    public ?DateTime $updatedAtLt;

    /**
     * @var ?DateTime $updatedAtGe This will return items where the updatedAt is greater than or equal to the specified value.
     */
    public ?DateTime $updatedAtGe;

    /**
     * @var ?DateTime $updatedAtLe This will return items where the updatedAt is less than or equal to the specified value.
     */
    public ?DateTime $updatedAtLe;

    /**
     * @param array{
     *   assistantId?: ?string,
     *   assistantName?: ?string,
     *   id?: ?string,
     *   idAny?: ?string,
     *   costLe?: ?float,
     *   costGe?: ?float,
     *   cost?: ?float,
     *   successEvaluation?: ?string,
     *   endedReason?: ?string,
     *   transcriber?: ?string,
     *   model?: ?string,
     *   voice?: ?string,
     *   firstMessage?: ?string,
     *   firstMessageInterruptionsEnabled?: ?bool,
     *   firstMessageMode?: ?value-of<CallsListPaginatedRequestFirstMessageMode>,
     *   voicemailDetection?: ?string,
     *   clientMessages?: ?array<value-of<CallsListPaginatedRequestClientMessagesItem>>,
     *   serverMessages?: ?array<value-of<CallsListPaginatedRequestServerMessagesItem>>,
     *   maxDurationSeconds?: ?float,
     *   backgroundSound?: ?string,
     *   modelOutputInMessagesEnabled?: ?bool,
     *   transportConfigurations?: ?array<string>,
     *   observabilityPlan?: ?string,
     *   credentials?: ?array<string>,
     *   hooks?: ?array<string>,
     *   variableValues?: ?array<string, mixed>,
     *   name?: ?string,
     *   voicemailMessage?: ?string,
     *   endCallMessage?: ?string,
     *   endCallPhrases?: ?array<string>,
     *   compliancePlan?: ?CompliancePlan,
     *   metadata?: ?array<string, mixed>,
     *   backgroundSpeechDenoisingPlan?: ?string,
     *   analysisPlan?: ?string,
     *   artifactPlan?: ?string,
     *   startSpeakingPlan?: ?string,
     *   stopSpeakingPlan?: ?string,
     *   monitorPlan?: ?string,
     *   credentialIds?: ?array<string>,
     *   server?: ?string,
     *   keypadInputPlan?: ?KeypadInputPlan,
     *   phoneNumberId?: ?string,
     *   numberE164CheckEnabled?: ?bool,
     *   extension?: ?string,
     *   assistantOverrides?: ?string,
     *   number?: ?string,
     *   sipUri?: ?string,
     *   email?: ?string,
     *   externalId?: ?string,
     *   structuredOutputs?: ?array<string, ?CallsListPaginatedRequestStructuredOutputsValue>,
     *   page?: ?float,
     *   sortOrder?: ?value-of<CallsListPaginatedRequestSortOrder>,
     *   limit?: ?float,
     *   createdAtGt?: ?DateTime,
     *   createdAtLt?: ?DateTime,
     *   createdAtGe?: ?DateTime,
     *   createdAtLe?: ?DateTime,
     *   updatedAtGt?: ?DateTime,
     *   updatedAtLt?: ?DateTime,
     *   updatedAtGe?: ?DateTime,
     *   updatedAtLe?: ?DateTime,
     * } $values
     */
    public function __construct(
        array $values = [],
    ) {
        $this->assistantId = $values['assistantId'] ?? null;
        $this->assistantName = $values['assistantName'] ?? null;
        $this->id = $values['id'] ?? null;
        $this->idAny = $values['idAny'] ?? null;
        $this->costLe = $values['costLe'] ?? null;
        $this->costGe = $values['costGe'] ?? null;
        $this->cost = $values['cost'] ?? null;
        $this->successEvaluation = $values['successEvaluation'] ?? null;
        $this->endedReason = $values['endedReason'] ?? null;
        $this->transcriber = $values['transcriber'] ?? null;
        $this->model = $values['model'] ?? null;
        $this->voice = $values['voice'] ?? null;
        $this->firstMessage = $values['firstMessage'] ?? null;
        $this->firstMessageInterruptionsEnabled = $values['firstMessageInterruptionsEnabled'] ?? null;
        $this->firstMessageMode = $values['firstMessageMode'] ?? null;
        $this->voicemailDetection = $values['voicemailDetection'] ?? null;
        $this->clientMessages = $values['clientMessages'] ?? null;
        $this->serverMessages = $values['serverMessages'] ?? null;
        $this->maxDurationSeconds = $values['maxDurationSeconds'] ?? null;
        $this->backgroundSound = $values['backgroundSound'] ?? null;
        $this->modelOutputInMessagesEnabled = $values['modelOutputInMessagesEnabled'] ?? null;
        $this->transportConfigurations = $values['transportConfigurations'] ?? null;
        $this->observabilityPlan = $values['observabilityPlan'] ?? null;
        $this->credentials = $values['credentials'] ?? null;
        $this->hooks = $values['hooks'] ?? null;
        $this->variableValues = $values['variableValues'] ?? null;
        $this->name = $values['name'] ?? null;
        $this->voicemailMessage = $values['voicemailMessage'] ?? null;
        $this->endCallMessage = $values['endCallMessage'] ?? null;
        $this->endCallPhrases = $values['endCallPhrases'] ?? null;
        $this->compliancePlan = $values['compliancePlan'] ?? null;
        $this->metadata = $values['metadata'] ?? null;
        $this->backgroundSpeechDenoisingPlan = $values['backgroundSpeechDenoisingPlan'] ?? null;
        $this->analysisPlan = $values['analysisPlan'] ?? null;
        $this->artifactPlan = $values['artifactPlan'] ?? null;
        $this->startSpeakingPlan = $values['startSpeakingPlan'] ?? null;
        $this->stopSpeakingPlan = $values['stopSpeakingPlan'] ?? null;
        $this->monitorPlan = $values['monitorPlan'] ?? null;
        $this->credentialIds = $values['credentialIds'] ?? null;
        $this->server = $values['server'] ?? null;
        $this->keypadInputPlan = $values['keypadInputPlan'] ?? null;
        $this->phoneNumberId = $values['phoneNumberId'] ?? null;
        $this->numberE164CheckEnabled = $values['numberE164CheckEnabled'] ?? null;
        $this->extension = $values['extension'] ?? null;
        $this->assistantOverrides = $values['assistantOverrides'] ?? null;
        $this->number = $values['number'] ?? null;
        $this->sipUri = $values['sipUri'] ?? null;
        $this->email = $values['email'] ?? null;
        $this->externalId = $values['externalId'] ?? null;
        $this->structuredOutputs = $values['structuredOutputs'] ?? null;
        $this->page = $values['page'] ?? null;
        $this->sortOrder = $values['sortOrder'] ?? null;
        $this->limit = $values['limit'] ?? null;
        $this->createdAtGt = $values['createdAtGt'] ?? null;
        $this->createdAtLt = $values['createdAtLt'] ?? null;
        $this->createdAtGe = $values['createdAtGe'] ?? null;
        $this->createdAtLe = $values['createdAtLe'] ?? null;
        $this->updatedAtGt = $values['updatedAtGt'] ?? null;
        $this->updatedAtLt = $values['updatedAtLt'] ?? null;
        $this->updatedAtGe = $values['updatedAtGe'] ?? null;
        $this->updatedAtLe = $values['updatedAtLe'] ?? null;
    }
}
