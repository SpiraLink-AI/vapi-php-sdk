<?php declare(strict_types=1);

namespace Vapi\Types;

use DateTime;
use Vapi\Core\Json\JsonProperty;
use Vapi\Core\Json\JsonSerializableType;
use Vapi\Core\Types\ArrayType;
use Vapi\Core\Types\Date;
use Vapi\Core\Types\Union;

final class Chat extends JsonSerializableType
{
    /**
     * @var ?string $assistantId This is the assistant that will be used for the chat. To use an existing assistant, use `assistantId` instead.
     */
    #[JsonProperty('assistantId')]
    public ?string $assistantId;

    /**
     * @var ?CreateAssistantDto $assistant This is the assistant that will be used for the chat. To use an existing assistant, use `assistantId` instead.
     */
    #[JsonProperty('assistant')]
    public ?CreateAssistantDto $assistant;

    /**
     * These are the variable values that will be used to replace template variables in the assistant messages.
     * Only variable substitution is supported in chat contexts - other assistant properties cannot be overridden.
     *
     * @var ?AssistantOverrides $assistantOverrides
     */
    #[JsonProperty('assistantOverrides')]
    public ?AssistantOverrides $assistantOverrides;

    /**
     * @var ?string $squadId This is the squad that will be used for the chat. To use a transient squad, use `squad` instead.
     */
    #[JsonProperty('squadId')]
    public ?string $squadId;

    /**
     * @var ?CreateSquadDto $squad This is the squad that will be used for the chat. To use an existing squad, use `squadId` instead.
     */
    #[JsonProperty('squad')]
    public ?CreateSquadDto $squad;

    /**
     * @var ?string $name This is the name of the chat. This is just for your own reference.
     */
    #[JsonProperty('name')]
    public ?string $name;

    /**
     * This is the ID of the session that will be used for the chat.
     * Mutually exclusive with previousChatId.
     *
     * @var ?string $sessionId
     */
    #[JsonProperty('sessionId')]
    public ?string $sessionId;

    /**
     * This is the input text for the chat.
     * Can be a string or an array of chat messages.
     *
     * @var (
     *    string
     *   |array<(
     *    SystemMessage
     *   |UserMessage
     *   |AssistantMessage
     *   |ToolMessage
     *   |DeveloperMessage
     * )>
     * )|null $input
     */
    #[JsonProperty('input'), Union('string', [new Union(SystemMessage::class, UserMessage::class, AssistantMessage::class, ToolMessage::class, DeveloperMessage::class)], 'null')]
    public string|array|null $input;

    /**
     * This is a flag that determines whether the response should be streamed.
     * When true, the response will be sent as chunks of text.
     *
     * @var ?bool $stream
     */
    #[JsonProperty('stream')]
    public ?bool $stream;

    /**
     * This is the ID of the chat that will be used as context for the new chat.
     * The messages from the previous chat will be used as context.
     * Mutually exclusive with sessionId.
     *
     * @var ?string $previousChatId
     */
    #[JsonProperty('previousChatId')]
    public ?string $previousChatId;

    /**
     * @var string $id This is the unique identifier for the chat.
     */
    #[JsonProperty('id')]
    public string $id;

    /**
     * @var string $orgId This is the unique identifier for the org that this chat belongs to.
     */
    #[JsonProperty('orgId')]
    public string $orgId;

    /**
     * This is an array of messages used as context for the chat.
     * Used to provide message history for multi-turn conversations.
     *
     * @var ?array<(
     *    SystemMessage
     *   |UserMessage
     *   |AssistantMessage
     *   |ToolMessage
     *   |DeveloperMessage
     * )> $messages
     */
    #[JsonProperty('messages'), ArrayType([new Union(SystemMessage::class, UserMessage::class, AssistantMessage::class, ToolMessage::class, DeveloperMessage::class)])]
    public ?array $messages;

    /**
     * @var ?array<(
     *    SystemMessage
     *   |UserMessage
     *   |AssistantMessage
     *   |ToolMessage
     *   |DeveloperMessage
     * )> $output This is the output messages generated by the system in response to the input.
     */
    #[JsonProperty('output'), ArrayType([new Union(SystemMessage::class, UserMessage::class, AssistantMessage::class, ToolMessage::class, DeveloperMessage::class)])]
    public ?array $output;

    /**
     * @var DateTime $createdAt This is the ISO 8601 date-time string of when the chat was created.
     */
    #[JsonProperty('createdAt'), Date(Date::TYPE_DATETIME)]
    public DateTime $createdAt;

    /**
     * @var DateTime $updatedAt This is the ISO 8601 date-time string of when the chat was last updated.
     */
    #[JsonProperty('updatedAt'), Date(Date::TYPE_DATETIME)]
    public DateTime $updatedAt;

    /**
     * @var ?array<ChatCostsItem> $costs These are the costs of individual components of the chat in USD.
     */
    #[JsonProperty('costs'), ArrayType([ChatCostsItem::class])]
    public ?array $costs;

    /**
     * @var ?float $cost This is the cost of the chat in USD.
     */
    #[JsonProperty('cost')]
    public ?float $cost;

    /**
     * @param array{
     *   id: string,
     *   orgId: string,
     *   createdAt: DateTime,
     *   updatedAt: DateTime,
     *   assistantId?: ?string,
     *   assistant?: ?CreateAssistantDto,
     *   assistantOverrides?: ?AssistantOverrides,
     *   squadId?: ?string,
     *   squad?: ?CreateSquadDto,
     *   name?: ?string,
     *   sessionId?: ?string,
     *   input?: (
     *    string
     *   |array<(
     *    SystemMessage
     *   |UserMessage
     *   |AssistantMessage
     *   |ToolMessage
     *   |DeveloperMessage
     * )>
     * )|null,
     *   stream?: ?bool,
     *   previousChatId?: ?string,
     *   messages?: ?array<(
     *    SystemMessage
     *   |UserMessage
     *   |AssistantMessage
     *   |ToolMessage
     *   |DeveloperMessage
     * )>,
     *   output?: ?array<(
     *    SystemMessage
     *   |UserMessage
     *   |AssistantMessage
     *   |ToolMessage
     *   |DeveloperMessage
     * )>,
     *   costs?: ?array<ChatCostsItem>,
     *   cost?: ?float,
     * } $values
     */
    public function __construct(
        array $values,
    ) {
        $this->assistantId = $values['assistantId'] ?? null;
        $this->assistant = $values['assistant'] ?? null;
        $this->assistantOverrides = $values['assistantOverrides'] ?? null;
        $this->squadId = $values['squadId'] ?? null;
        $this->squad = $values['squad'] ?? null;
        $this->name = $values['name'] ?? null;
        $this->sessionId = $values['sessionId'] ?? null;
        $this->input = $values['input'] ?? null;
        $this->stream = $values['stream'] ?? null;
        $this->previousChatId = $values['previousChatId'] ?? null;
        $this->id = $values['id'];
        $this->orgId = $values['orgId'];
        $this->messages = $values['messages'] ?? null;
        $this->output = $values['output'] ?? null;
        $this->createdAt = $values['createdAt'];
        $this->updatedAt = $values['updatedAt'];
        $this->costs = $values['costs'] ?? null;
        $this->cost = $values['cost'] ?? null;
    }

    /**
     * @return string
     */
    public function __toString(): string
    {
        return $this->toJson();
    }
}
