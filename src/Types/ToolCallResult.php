<?php declare(strict_types=1);

namespace Vapi\Types;

use Vapi\Core\Json\JsonProperty;
use Vapi\Core\Json\JsonSerializableType;
use Vapi\Core\Types\ArrayType;

final class ToolCallResult extends JsonSerializableType
{
    /**
     * This is the message that will be spoken to the user.
     *
     * If this is not returned, assistant will speak:
     * 1. a `request-complete` or `request-failed` message from `tool.messages`, if it exists
     * 2. a response generated by the model, if not
     *
     * @var ?ToolCallResultMessage $message
     */
    #[JsonProperty('message')]
    public ?ToolCallResultMessage $message;

    /**
     * @var string $name This is the name of the function the model called.
     */
    #[JsonProperty('name')]
    public string $name;

    /**
     * @var string $toolCallId This is the unique identifier for the tool call.
     */
    #[JsonProperty('toolCallId')]
    public string $toolCallId;

    /**
     * This is the result if the tool call was successful. This is added to the conversation history.
     *
     * Further, if this is returned, assistant will speak:
     * 1. the `message`, if it exists and is of type `request-complete`
     * 2. a `request-complete` message from `tool.messages`, if it exists
     * 3. a response generated by the model, if neither exist
     *
     * @var ?string $result
     */
    #[JsonProperty('result')]
    public ?string $result;

    /**
     * This is the error if the tool call was not successful. This is added to the conversation history.
     *
     * Further, if this is returned, assistant will speak:
     * 1. the `message`, if it exists and is of type `request-failed`
     * 2. a `request-failed` message from `tool.messages`, if it exists
     * 3. a response generated by the model, if neither exist
     *
     * @var ?string $error
     */
    #[JsonProperty('error')]
    public ?string $error;

    /**
     * @var ?array<string, mixed> $metadata This is optional metadata for the tool call result to be sent to the client.
     */
    #[JsonProperty('metadata'), ArrayType(['string' => 'mixed'])]
    public ?array $metadata;

    /**
     * @param array{
     *   name: string,
     *   toolCallId: string,
     *   message?: ?ToolCallResultMessage,
     *   result?: ?string,
     *   error?: ?string,
     *   metadata?: ?array<string, mixed>,
     * } $values
     */
    public function __construct(
        array $values,
    ) {
        $this->message = $values['message'] ?? null;
        $this->name = $values['name'];
        $this->toolCallId = $values['toolCallId'];
        $this->result = $values['result'] ?? null;
        $this->error = $values['error'] ?? null;
        $this->metadata = $values['metadata'] ?? null;
    }

    /**
     * @return string
     */
    public function __toString(): string
    {
        return $this->toJson();
    }
}
